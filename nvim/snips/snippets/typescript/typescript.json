{
  "consoleAssert": {
    "key": "consoleAssert",
    "prefix": "cas",
    "body": ["console.assert(${1:first}, ${2:second})"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleClear": {
    "key": "consoleClear",
    "prefix": "ccl",
    "body": ["console.clear()"],
    "description": "Clears the console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleCount": {
    "key": "consoleCount",
    "prefix": "cco",
    "body": ["console.count(${1:first})"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleDir": {
    "key": "consoleDir",
    "prefix": "cdi",
    "body": ["console.dir(${1:first})"],
    "description": "Prints a JavaScript representation of the specified object",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleError": {
    "key": "consoleError",
    "prefix": "cer",
    "body": ["console.error(${1:first})"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleGroup": {
    "key": "consoleGroup",
    "prefix": "cgr",
    "body": ["console.group('${1:first}')"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleGroupEnd": {
    "key": "consoleGroupEnd",
    "prefix": "cge",
    "body": ["console.groupEnd()"],
    "description": "Closes out the corresponding console.group().",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLog": {
    "key": "consoleLog",
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleTrace": {
    "key": "consoleTrace",
    "prefix": "ctr",
    "body": ["console.trace(${1:first})"],
    "description": "Prints a stack trace from the point where the method was called",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogObject": {
    "key": "consoleLogObject",
    "prefix": "clo",
    "body": ["console.log('${1:first}', ${1:first})"],
    "description": "Logs property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogJson": {
    "key": "consoleLogJson",
    "prefix": "clj",
    "body": ["console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"],
    "description": "Logs stringified JSON property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffect": {
    "key": "useEffect",
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importAs": {
    "key": "importAs",
    "prefix": "ima",
    "body": ["import { ${2:second} as ${3:third} } from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "import": {
    "key": "import",
    "prefix": "imp",
    "body": ["import ${2:second} from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forEach": {
    "key": "forEach",
    "prefix": "fre",
    "body": ["${1:first}.forEach(${2:second} => {${3:third}})"],
    "description": "Creates a forEach statement",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forOf": {
    "key": "forOf",
    "prefix": "fof",
    "body": ["for(let ${1:first} of ${2:second}) {${3:third}}"],
    "description": "Iterating over property names of iterable objects",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forIn": {
    "key": "forIn",
    "prefix": "fin",
    "body": ["for(let ${1:first} in ${2:second}) {${3:third}}"],
    "description": "Iterating over property values of iterable objects",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "anonymousFunction": {
    "key": "anonymousFunction",
    "prefix": "anfn",
    "body": ["(${1:first}) => { ${2:second} }"],
    "description": "Creates an anonymous function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "namedFunction": {
    "key": "namedFunction",
    "prefix": "nfn",
    "body": ["const ${1:first} = (${2:second}) => { ${3:third} }"],
    "description": "Creates a named function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "promise": {
    "key": "promise",
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => { ${1:first} })"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentBigBlock": {
    "key": "commentBigBlock",
    "prefix": "cmmb",
    "body": ["/**", " * ${1:first}", " */"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
}
